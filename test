def spotify_callback(request):
    code = request.GET.get('code')
    error = request.GET.get('error')
    
    if error:
        return handle_error(request, error)

    if not code:
        return handle_missing_code(request)

    access_token = exchange_code_for_token(code)
    if not access_token:
        return handle_error(request, _("Failed to authenticate with Spotify."))

    user_info = fetch_user_info(access_token)
    if not user_info:
        return handle_error(request, _("Failed to fetch user data from Spotify."))
    
    # Process and save user info...
    
def handle_error(request, error_message):
    messages.error(request, error_message)
    return redirect('wrap_app:home')

def handle_missing_code(request):
    messages.error(request, _("No code provided in Spotify callback."))
    return redirect('wrap_app:home')

def exchange_code_for_token(code):
    payload = {
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    auth_header = base64.b64encode(f"{CLIENT_ID}:{CLIENT_SECRET}".encode()).decode()
    headers = {
        'Authorization': f'Basic {auth_header}',
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    try:
        response = requests.post(SPOTIFY_TOKEN_URL, data=payload, headers=headers)
        response.raise_for_status()
        return response.json().get("access_token")
    except requests.exceptions.RequestException:
        return None

def fetch_user_info(access_token):
    headers = {
        'Authorization': f'Bearer {access_token}',
    }
    try:
        response = requests.get("https://api.spotify.com/v1/me", headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        return None
