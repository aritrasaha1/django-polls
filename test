def spotify_callback(request):
    code = request.GET.get('code')
    error = request.GET.get('error')
    state = request.GET.get('state')

    if error:
        messages.error(request, _("Error during authentication: ") + error)
        return redirect('wrap_app:home')

    if not code:
        messages.error(request, _("No code provided in Spotify callback."))
        return redirect('wrap_app:home')

    # Exchange code for access token
    payload = {
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    auth_header = base64.b64encode(f"{CLIENT_ID}:{CLIENT_SECRET}".encode()).decode()
    headers = {
        'Authorization': f'Basic {auth_header}',
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    try:
        response = requests.post(SPOTIFY_TOKEN_URL, data=payload, headers=headers)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error exchanging code for token: {e}")
        messages.error(request, _("Failed to authenticate with Spotify."))
        return redirect('wrap_app:home')

    # Fetch user information from Spotify
    try:
        headers = {
            'Authorization': f'Bearer {response.json().get("access_token")}',
        }
        user_info_response = requests.get("https://api.spotify.com/v1/me", headers=headers)
        user_info_response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching user info: {e}")
        messages.error(request, _("Failed to fetch user data from Spotify."))
        return redirect('wrap_app:home')

    # Handle user info logic
    user_info = user_info_response.json()
    # process and save user info...
